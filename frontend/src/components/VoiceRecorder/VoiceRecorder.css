/* VoiceRecorder.css
        <div className={`task-container ${className}`}>
            <h1>{title}</h1>
            <p>{subtitle}</p>

            <RecordingTimer
            time={recordingTime}
            status={recordingStatus}
            audioLevels={audioLevels}
            showVisualizer={showVisualizer}
            />

            <StatusIndicator status={recordingStatus} />

            <RecordingControls
            recordingStatus={recordingStatus}
            permission={permission}
            onStart={startRecording}
            onPause={pauseRecording}
            onResume={resumeRecording}
            onStop={stopRecording}
            onPermission={getMicrophonePermission}
            />

            <PlaybackSection
            audioURL={audioURL}
            recordingStatus={recordingStatus}
            onRepeat={repeatRecording}
            onNextTask={handleNextTask}
            showNextButton={showNextButton}
            />
        </div>
*/

/* Timer */
.timer-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 3vh;
}

/* Wrap timer + intensity circle together */
.timer-core {
  position: relative;
  width: 150px;   /* matches intensity circle size */
  height: 150px;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Intensity circle always centered */
.intensity-circle {
  position: absolute;
  width: 150px;
  height: 150px;
  border-radius: 50%;
  background: rgba(255, 0, 0, 0.3); /* red glow, tweak as needed */
  transition: transform 0.08s linear, opacity 0.08s linear;
  z-index: 0;
}

/* Timer circle on top */
.timer-circle {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: white;
  border: 5px solid #6b7280;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: border-color 0.3s ease;
  z-index: 1; /* above intensity*/
}
.timer-circle.recording {
  border-color: var(--danger);
}
.timer-circle.paused {
  border-color: var(--warning);
}
.timer-display {
  font-size: 1.8rem;
  font-weight: bold;
}

/* Extra control (speaker button) */
.extra-control {
  position: absolute;
  left: 52vw;   /* distance from center */
  top: 50%;
  transform: translateY(-50%);
  width: 80px;
  height: 80px;
  display: flex;
  justify-content: center;
  align-items: center;
}


/* Audio Example icon*/
.audio-example-btn {
  background: transparent !important;
  border: none !important;
  box-shadow: none !important; 
  align-items: center;
  cursor: pointer;
  padding: 0;
  justify-content: center;
}

.audio-example-btn.disabled {
  opacity: 0.8;
  cursor: not-allowed;
}

.audio-example-btn img {
  display: block;
  width: 60px; 
  height: 60px;
}


/* Status badge */
.status {
  margin: 0.5rem 0;
  font-weight: 600;
  display: inline-block;
  padding: 0.4rem 0.8rem;
  border-radius: 9999px;
  font-size: 1rem;
  background: var(--muted);
  color: white;
}
.status.recording {
  background: var(--danger);
}
.status.paused {
  background: var(--warning);
}
.status.ready {
  background: var(--primary);
}
.status.done {
  background: var(--success);
}


/* Mobile-friendly adjustments */
@media (max-width: 600px) {
  .timer-wrapper {
    padding: 0.1rem;      /* reduce padding */
    gap: 0.1rem;           /* smaller spacing */
  }

  .timer-circle {
    width: 90px;         /* smaller timer */
    height: 90px;
    border-width: 4px;
  }

  .timer-display {
    font-size: 1.2rem;   /* smaller digits */
  }

  .status {
    font-size: 0.9rem;   /* compact status badge */
    padding: 0.2rem 0.6rem;
  }

  .extra-control {
    left: 60vw;   /* distance from center */
  }

  .audio-example-btn img {
    width: 40px; 
    height: 40px;
  }
}
